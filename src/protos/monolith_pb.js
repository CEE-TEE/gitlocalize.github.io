// source: monolith.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.api.CommentRequest', null, global);
goog.exportSymbol('proto.api.CommentThread', null, global);
goog.exportSymbol('proto.api.CommentThreadComment', null, global);
goog.exportSymbol('proto.api.CurrentUser', null, global);
goog.exportSymbol('proto.api.CurrentUserRequest', null, global);
goog.exportSymbol('proto.api.DiscussionRequest', null, global);
goog.exportSymbol('proto.api.DiscussionsRequest', null, global);
goog.exportSymbol('proto.api.DiscussionsResponse', null, global);
goog.exportSymbol('proto.api.GetResourceRequest', null, global);
goog.exportSymbol('proto.api.GetResourceResponse', null, global);
goog.exportSymbol('proto.api.ResourceForView', null, global);
goog.exportSymbol('proto.api.ResourceTranslationStatistic', null, global);
goog.exportSymbol('proto.api.SegmentForView', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.CommentThreadComment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.CommentThreadComment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.CommentThreadComment.displayName = 'proto.api.CommentThreadComment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.CommentThread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.CommentThread.repeatedFields_, null);
};
goog.inherits(proto.api.CommentThread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.CommentThread.displayName = 'proto.api.CommentThread';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DiscussionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DiscussionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DiscussionsRequest.displayName = 'proto.api.DiscussionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DiscussionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DiscussionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DiscussionRequest.displayName = 'proto.api.DiscussionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.CommentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.CommentRequest.repeatedFields_, null);
};
goog.inherits(proto.api.CommentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.CommentRequest.displayName = 'proto.api.CommentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DiscussionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.DiscussionsResponse.repeatedFields_, null);
};
goog.inherits(proto.api.DiscussionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DiscussionsResponse.displayName = 'proto.api.DiscussionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.CurrentUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.CurrentUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.CurrentUser.displayName = 'proto.api.CurrentUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.CurrentUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.CurrentUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.CurrentUserRequest.displayName = 'proto.api.CurrentUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.GetResourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.GetResourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.GetResourceRequest.displayName = 'proto.api.GetResourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ResourceTranslationStatistic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ResourceTranslationStatistic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ResourceTranslationStatistic.displayName = 'proto.api.ResourceTranslationStatistic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ResourceForView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ResourceForView.repeatedFields_, null);
};
goog.inherits(proto.api.ResourceForView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ResourceForView.displayName = 'proto.api.ResourceForView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.GetResourceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.GetResourceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.GetResourceResponse.displayName = 'proto.api.GetResourceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.SegmentForView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.SegmentForView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.SegmentForView.displayName = 'proto.api.SegmentForView';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.CommentThreadComment.prototype.toObject = function(opt_includeInstance) {
  return proto.api.CommentThreadComment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.CommentThreadComment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CommentThreadComment.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 3, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.CommentThreadComment}
 */
proto.api.CommentThreadComment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.CommentThreadComment;
  return proto.api.CommentThreadComment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.CommentThreadComment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.CommentThreadComment}
 */
proto.api.CommentThreadComment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.CommentThreadComment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.CommentThreadComment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.CommentThreadComment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CommentThreadComment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.api.CommentThreadComment.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.CommentThreadComment} returns this
 */
proto.api.CommentThreadComment.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string user_name = 2;
 * @return {string}
 */
proto.api.CommentThreadComment.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CommentThreadComment} returns this
 */
proto.api.CommentThreadComment.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string avatar = 3;
 * @return {string}
 */
proto.api.CommentThreadComment.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CommentThreadComment} returns this
 */
proto.api.CommentThreadComment.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string comment = 4;
 * @return {string}
 */
proto.api.CommentThreadComment.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CommentThreadComment} returns this
 */
proto.api.CommentThreadComment.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string created_at = 5;
 * @return {string}
 */
proto.api.CommentThreadComment.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CommentThreadComment} returns this
 */
proto.api.CommentThreadComment.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.CommentThread.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.CommentThread.prototype.toObject = function(opt_includeInstance) {
  return proto.api.CommentThread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.CommentThread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CommentThread.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentsList: jspb.Message.toObjectList(msg.getCommentsList(),
    proto.api.CommentThreadComment.toObject, includeInstance),
    segmentIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    discussionId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    important: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.CommentThread}
 */
proto.api.CommentThread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.CommentThread;
  return proto.api.CommentThread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.CommentThread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.CommentThread}
 */
proto.api.CommentThread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.CommentThreadComment;
      reader.readMessage(value,proto.api.CommentThreadComment.deserializeBinaryFromReader);
      msg.addComments(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSegmentIds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDiscussionId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImportant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.CommentThread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.CommentThread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.CommentThread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CommentThread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.CommentThreadComment.serializeBinaryToWriter
    );
  }
  f = message.getSegmentIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getDiscussionId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getImportant();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * repeated CommentThreadComment comments = 1;
 * @return {!Array<!proto.api.CommentThreadComment>}
 */
proto.api.CommentThread.prototype.getCommentsList = function() {
  return /** @type{!Array<!proto.api.CommentThreadComment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.CommentThreadComment, 1));
};


/**
 * @param {!Array<!proto.api.CommentThreadComment>} value
 * @return {!proto.api.CommentThread} returns this
*/
proto.api.CommentThread.prototype.setCommentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.CommentThreadComment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.CommentThreadComment}
 */
proto.api.CommentThread.prototype.addComments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.CommentThreadComment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.CommentThread} returns this
 */
proto.api.CommentThread.prototype.clearCommentsList = function() {
  return this.setCommentsList([]);
};


/**
 * repeated string segment_ids = 2;
 * @return {!Array<string>}
 */
proto.api.CommentThread.prototype.getSegmentIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.CommentThread} returns this
 */
proto.api.CommentThread.prototype.setSegmentIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.CommentThread} returns this
 */
proto.api.CommentThread.prototype.addSegmentIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.CommentThread} returns this
 */
proto.api.CommentThread.prototype.clearSegmentIdsList = function() {
  return this.setSegmentIdsList([]);
};


/**
 * optional int64 discussion_id = 3;
 * @return {number}
 */
proto.api.CommentThread.prototype.getDiscussionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.CommentThread} returns this
 */
proto.api.CommentThread.prototype.setDiscussionId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool important = 4;
 * @return {boolean}
 */
proto.api.CommentThread.prototype.getImportant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.CommentThread} returns this
 */
proto.api.CommentThread.prototype.setImportant = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DiscussionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DiscussionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DiscussionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DiscussionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DiscussionsRequest}
 */
proto.api.DiscussionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DiscussionsRequest;
  return proto.api.DiscussionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DiscussionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DiscussionsRequest}
 */
proto.api.DiscussionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setResourceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DiscussionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DiscussionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DiscussionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DiscussionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 resource_id = 1;
 * @return {number}
 */
proto.api.DiscussionsRequest.prototype.getResourceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.DiscussionsRequest} returns this
 */
proto.api.DiscussionsRequest.prototype.setResourceId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DiscussionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DiscussionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DiscussionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DiscussionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    discussionId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DiscussionRequest}
 */
proto.api.DiscussionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DiscussionRequest;
  return proto.api.DiscussionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DiscussionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DiscussionRequest}
 */
proto.api.DiscussionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDiscussionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DiscussionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DiscussionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DiscussionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DiscussionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiscussionId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 discussion_id = 1;
 * @return {number}
 */
proto.api.DiscussionRequest.prototype.getDiscussionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.DiscussionRequest} returns this
 */
proto.api.DiscussionRequest.prototype.setDiscussionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.CommentRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.CommentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.CommentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.CommentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CommentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    language: jspb.Message.getFieldWithDefault(msg, 3, ""),
    commentid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    segmentIdsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.CommentRequest}
 */
proto.api.CommentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.CommentRequest;
  return proto.api.CommentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.CommentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.CommentRequest}
 */
proto.api.CommentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setResourceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommentid(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSegmentIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.CommentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.CommentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.CommentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CommentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCommentid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSegmentIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      5,
      f
    );
  }
};


/**
 * optional int64 resource_id = 1;
 * @return {number}
 */
proto.api.CommentRequest.prototype.getResourceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.CommentRequest} returns this
 */
proto.api.CommentRequest.prototype.setResourceId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.api.CommentRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CommentRequest} returns this
 */
proto.api.CommentRequest.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string language = 3;
 * @return {string}
 */
proto.api.CommentRequest.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CommentRequest} returns this
 */
proto.api.CommentRequest.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 commentId = 4;
 * @return {number}
 */
proto.api.CommentRequest.prototype.getCommentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.CommentRequest} returns this
 */
proto.api.CommentRequest.prototype.setCommentid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated int64 segment_ids = 5;
 * @return {!Array<number>}
 */
proto.api.CommentRequest.prototype.getSegmentIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.api.CommentRequest} returns this
 */
proto.api.CommentRequest.prototype.setSegmentIdsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.api.CommentRequest} returns this
 */
proto.api.CommentRequest.prototype.addSegmentIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.CommentRequest} returns this
 */
proto.api.CommentRequest.prototype.clearSegmentIdsList = function() {
  return this.setSegmentIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.DiscussionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DiscussionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DiscussionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DiscussionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DiscussionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    discussionsList: jspb.Message.toObjectList(msg.getDiscussionsList(),
    proto.api.CommentThread.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DiscussionsResponse}
 */
proto.api.DiscussionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DiscussionsResponse;
  return proto.api.DiscussionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DiscussionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DiscussionsResponse}
 */
proto.api.DiscussionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.CommentThread;
      reader.readMessage(value,proto.api.CommentThread.deserializeBinaryFromReader);
      msg.addDiscussions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DiscussionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DiscussionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DiscussionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DiscussionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiscussionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.CommentThread.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CommentThread discussions = 1;
 * @return {!Array<!proto.api.CommentThread>}
 */
proto.api.DiscussionsResponse.prototype.getDiscussionsList = function() {
  return /** @type{!Array<!proto.api.CommentThread>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.CommentThread, 1));
};


/**
 * @param {!Array<!proto.api.CommentThread>} value
 * @return {!proto.api.DiscussionsResponse} returns this
*/
proto.api.DiscussionsResponse.prototype.setDiscussionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.CommentThread=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.CommentThread}
 */
proto.api.DiscussionsResponse.prototype.addDiscussions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.CommentThread, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.DiscussionsResponse} returns this
 */
proto.api.DiscussionsResponse.prototype.clearDiscussionsList = function() {
  return this.setDiscussionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.CurrentUser.prototype.toObject = function(opt_includeInstance) {
  return proto.api.CurrentUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.CurrentUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CurrentUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.CurrentUser}
 */
proto.api.CurrentUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.CurrentUser;
  return proto.api.CurrentUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.CurrentUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.CurrentUser}
 */
proto.api.CurrentUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.CurrentUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.CurrentUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.CurrentUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CurrentUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.api.CurrentUser.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.CurrentUser} returns this
 */
proto.api.CurrentUser.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string user_name = 2;
 * @return {string}
 */
proto.api.CurrentUser.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CurrentUser} returns this
 */
proto.api.CurrentUser.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string avatar = 3;
 * @return {string}
 */
proto.api.CurrentUser.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CurrentUser} returns this
 */
proto.api.CurrentUser.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.CurrentUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.CurrentUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.CurrentUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CurrentUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.CurrentUserRequest}
 */
proto.api.CurrentUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.CurrentUserRequest;
  return proto.api.CurrentUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.CurrentUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.CurrentUserRequest}
 */
proto.api.CurrentUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.CurrentUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.CurrentUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.CurrentUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CurrentUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.GetResourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.GetResourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.GetResourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.GetResourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.GetResourceRequest}
 */
proto.api.GetResourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.GetResourceRequest;
  return proto.api.GetResourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.GetResourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.GetResourceRequest}
 */
proto.api.GetResourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setResourceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.GetResourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.GetResourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.GetResourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.GetResourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 resource_id = 1;
 * @return {number}
 */
proto.api.GetResourceRequest.prototype.getResourceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.GetResourceRequest} returns this
 */
proto.api.GetResourceRequest.prototype.setResourceId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ResourceTranslationStatistic.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ResourceTranslationStatistic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ResourceTranslationStatistic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ResourceTranslationStatistic.toObject = function(includeInstance, msg) {
  var f, obj = {
    statisticId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalChars: jspb.Message.getFieldWithDefault(msg, 2, 0),
    untranslatedChars: jspb.Message.getFieldWithDefault(msg, 4, 0),
    translatedChars: jspb.Message.getFieldWithDefault(msg, 5, 0),
    elementableId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    elementableType: jspb.Message.getFieldWithDefault(msg, 7, ""),
    totalWords: jspb.Message.getFieldWithDefault(msg, 8, 0),
    untranslatedWords: jspb.Message.getFieldWithDefault(msg, 9, 0),
    translatedWords: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ResourceTranslationStatistic}
 */
proto.api.ResourceTranslationStatistic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ResourceTranslationStatistic;
  return proto.api.ResourceTranslationStatistic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ResourceTranslationStatistic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ResourceTranslationStatistic}
 */
proto.api.ResourceTranslationStatistic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStatisticId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalChars(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUntranslatedChars(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTranslatedChars(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setElementableId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setElementableType(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalWords(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUntranslatedWords(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTranslatedWords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ResourceTranslationStatistic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ResourceTranslationStatistic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ResourceTranslationStatistic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ResourceTranslationStatistic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatisticId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotalChars();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUntranslatedChars();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTranslatedChars();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getElementableId();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getElementableType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTotalWords();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getUntranslatedWords();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getTranslatedWords();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional int64 statistic_id = 1;
 * @return {number}
 */
proto.api.ResourceTranslationStatistic.prototype.getStatisticId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ResourceTranslationStatistic} returns this
 */
proto.api.ResourceTranslationStatistic.prototype.setStatisticId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 total_chars = 2;
 * @return {number}
 */
proto.api.ResourceTranslationStatistic.prototype.getTotalChars = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ResourceTranslationStatistic} returns this
 */
proto.api.ResourceTranslationStatistic.prototype.setTotalChars = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 untranslated_chars = 4;
 * @return {number}
 */
proto.api.ResourceTranslationStatistic.prototype.getUntranslatedChars = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ResourceTranslationStatistic} returns this
 */
proto.api.ResourceTranslationStatistic.prototype.setUntranslatedChars = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 translated_chars = 5;
 * @return {number}
 */
proto.api.ResourceTranslationStatistic.prototype.getTranslatedChars = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ResourceTranslationStatistic} returns this
 */
proto.api.ResourceTranslationStatistic.prototype.setTranslatedChars = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 elementable_id = 6;
 * @return {number}
 */
proto.api.ResourceTranslationStatistic.prototype.getElementableId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ResourceTranslationStatistic} returns this
 */
proto.api.ResourceTranslationStatistic.prototype.setElementableId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string elementable_type = 7;
 * @return {string}
 */
proto.api.ResourceTranslationStatistic.prototype.getElementableType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ResourceTranslationStatistic} returns this
 */
proto.api.ResourceTranslationStatistic.prototype.setElementableType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 total_words = 8;
 * @return {number}
 */
proto.api.ResourceTranslationStatistic.prototype.getTotalWords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ResourceTranslationStatistic} returns this
 */
proto.api.ResourceTranslationStatistic.prototype.setTotalWords = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 untranslated_words = 9;
 * @return {number}
 */
proto.api.ResourceTranslationStatistic.prototype.getUntranslatedWords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ResourceTranslationStatistic} returns this
 */
proto.api.ResourceTranslationStatistic.prototype.setUntranslatedWords = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 translated_words = 10;
 * @return {number}
 */
proto.api.ResourceTranslationStatistic.prototype.getTranslatedWords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ResourceTranslationStatistic} returns this
 */
proto.api.ResourceTranslationStatistic.prototype.setTranslatedWords = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.ResourceForView.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ResourceForView.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ResourceForView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ResourceForView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ResourceForView.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    completion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    synced: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    statusChecking: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    html: jspb.Message.getFieldWithDefault(msg, 6, ""),
    segmentsList: jspb.Message.toObjectList(msg.getSegmentsList(),
    proto.api.SegmentForView.toObject, includeInstance),
    translationStatistic: (f = msg.getTranslationStatistic()) && proto.api.ResourceTranslationStatistic.toObject(includeInstance, f),
    rawContent: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ResourceForView}
 */
proto.api.ResourceForView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ResourceForView;
  return proto.api.ResourceForView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ResourceForView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ResourceForView}
 */
proto.api.ResourceForView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setResourceId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCompletion(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSynced(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatusChecking(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtml(value);
      break;
    case 7:
      var value = new proto.api.SegmentForView;
      reader.readMessage(value,proto.api.SegmentForView.deserializeBinaryFromReader);
      msg.addSegments(value);
      break;
    case 8:
      var value = new proto.api.ResourceTranslationStatistic;
      reader.readMessage(value,proto.api.ResourceTranslationStatistic.deserializeBinaryFromReader);
      msg.setTranslationStatistic(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ResourceForView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ResourceForView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ResourceForView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ResourceForView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCompletion();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSynced();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getStatusChecking();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getHtml();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSegmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.api.SegmentForView.serializeBinaryToWriter
    );
  }
  f = message.getTranslationStatistic();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.api.ResourceTranslationStatistic.serializeBinaryToWriter
    );
  }
  f = message.getRawContent();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int64 resource_id = 1;
 * @return {number}
 */
proto.api.ResourceForView.prototype.getResourceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ResourceForView} returns this
 */
proto.api.ResourceForView.prototype.setResourceId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 completion = 2;
 * @return {number}
 */
proto.api.ResourceForView.prototype.getCompletion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ResourceForView} returns this
 */
proto.api.ResourceForView.prototype.setCompletion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool synced = 4;
 * @return {boolean}
 */
proto.api.ResourceForView.prototype.getSynced = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.ResourceForView} returns this
 */
proto.api.ResourceForView.prototype.setSynced = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool status_checking = 5;
 * @return {boolean}
 */
proto.api.ResourceForView.prototype.getStatusChecking = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.ResourceForView} returns this
 */
proto.api.ResourceForView.prototype.setStatusChecking = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string html = 6;
 * @return {string}
 */
proto.api.ResourceForView.prototype.getHtml = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ResourceForView} returns this
 */
proto.api.ResourceForView.prototype.setHtml = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated SegmentForView segments = 7;
 * @return {!Array<!proto.api.SegmentForView>}
 */
proto.api.ResourceForView.prototype.getSegmentsList = function() {
  return /** @type{!Array<!proto.api.SegmentForView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.SegmentForView, 7));
};


/**
 * @param {!Array<!proto.api.SegmentForView>} value
 * @return {!proto.api.ResourceForView} returns this
*/
proto.api.ResourceForView.prototype.setSegmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.api.SegmentForView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.SegmentForView}
 */
proto.api.ResourceForView.prototype.addSegments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.api.SegmentForView, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.ResourceForView} returns this
 */
proto.api.ResourceForView.prototype.clearSegmentsList = function() {
  return this.setSegmentsList([]);
};


/**
 * optional ResourceTranslationStatistic translation_statistic = 8;
 * @return {?proto.api.ResourceTranslationStatistic}
 */
proto.api.ResourceForView.prototype.getTranslationStatistic = function() {
  return /** @type{?proto.api.ResourceTranslationStatistic} */ (
    jspb.Message.getWrapperField(this, proto.api.ResourceTranslationStatistic, 8));
};


/**
 * @param {?proto.api.ResourceTranslationStatistic|undefined} value
 * @return {!proto.api.ResourceForView} returns this
*/
proto.api.ResourceForView.prototype.setTranslationStatistic = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ResourceForView} returns this
 */
proto.api.ResourceForView.prototype.clearTranslationStatistic = function() {
  return this.setTranslationStatistic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ResourceForView.prototype.hasTranslationStatistic = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string raw_content = 9;
 * @return {string}
 */
proto.api.ResourceForView.prototype.getRawContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ResourceForView} returns this
 */
proto.api.ResourceForView.prototype.setRawContent = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.GetResourceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.GetResourceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.GetResourceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.GetResourceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && proto.api.ResourceForView.toObject(includeInstance, f),
    parentResource: (f = msg.getParentResource()) && proto.api.ResourceForView.toObject(includeInstance, f),
    enableGlossary: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.GetResourceResponse}
 */
proto.api.GetResourceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.GetResourceResponse;
  return proto.api.GetResourceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.GetResourceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.GetResourceResponse}
 */
proto.api.GetResourceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ResourceForView;
      reader.readMessage(value,proto.api.ResourceForView.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 2:
      var value = new proto.api.ResourceForView;
      reader.readMessage(value,proto.api.ResourceForView.deserializeBinaryFromReader);
      msg.setParentResource(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableGlossary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.GetResourceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.GetResourceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.GetResourceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.GetResourceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.ResourceForView.serializeBinaryToWriter
    );
  }
  f = message.getParentResource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.ResourceForView.serializeBinaryToWriter
    );
  }
  f = message.getEnableGlossary();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional ResourceForView resource = 1;
 * @return {?proto.api.ResourceForView}
 */
proto.api.GetResourceResponse.prototype.getResource = function() {
  return /** @type{?proto.api.ResourceForView} */ (
    jspb.Message.getWrapperField(this, proto.api.ResourceForView, 1));
};


/**
 * @param {?proto.api.ResourceForView|undefined} value
 * @return {!proto.api.GetResourceResponse} returns this
*/
proto.api.GetResourceResponse.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.GetResourceResponse} returns this
 */
proto.api.GetResourceResponse.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.GetResourceResponse.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResourceForView parent_resource = 2;
 * @return {?proto.api.ResourceForView}
 */
proto.api.GetResourceResponse.prototype.getParentResource = function() {
  return /** @type{?proto.api.ResourceForView} */ (
    jspb.Message.getWrapperField(this, proto.api.ResourceForView, 2));
};


/**
 * @param {?proto.api.ResourceForView|undefined} value
 * @return {!proto.api.GetResourceResponse} returns this
*/
proto.api.GetResourceResponse.prototype.setParentResource = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.GetResourceResponse} returns this
 */
proto.api.GetResourceResponse.prototype.clearParentResource = function() {
  return this.setParentResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.GetResourceResponse.prototype.hasParentResource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool enable_glossary = 3;
 * @return {boolean}
 */
proto.api.GetResourceResponse.prototype.getEnableGlossary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.GetResourceResponse} returns this
 */
proto.api.GetResourceResponse.prototype.setEnableGlossary = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.SegmentForView.prototype.toObject = function(opt_includeInstance) {
  return proto.api.SegmentForView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.SegmentForView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SegmentForView.toObject = function(includeInstance, msg) {
  var f, obj = {
    segmentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentSegmentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    content: jspb.Message.getFieldWithDefault(msg, 3, ""),
    path: jspb.Message.getFieldWithDefault(msg, 4, ""),
    current: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    translationFlag: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isPretranslated: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    disabled: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    htmlContentForView: jspb.Message.getFieldWithDefault(msg, 9, ""),
    htmlContent: jspb.Message.getFieldWithDefault(msg, 10, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.SegmentForView}
 */
proto.api.SegmentForView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.SegmentForView;
  return proto.api.SegmentForView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.SegmentForView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.SegmentForView}
 */
proto.api.SegmentForView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSegmentId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setParentSegmentId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCurrent(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTranslationFlag(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPretranslated(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlContentForView(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlContent(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.SegmentForView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.SegmentForView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.SegmentForView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SegmentForView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getParentSegmentId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCurrent();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getTranslationFlag();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsPretranslated();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getHtmlContentForView();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getHtmlContent();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional int64 segment_id = 1;
 * @return {number}
 */
proto.api.SegmentForView.prototype.getSegmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setSegmentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 parent_segment_id = 2;
 * @return {number}
 */
proto.api.SegmentForView.prototype.getParentSegmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setParentSegmentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.api.SegmentForView.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string path = 4;
 * @return {string}
 */
proto.api.SegmentForView.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool current = 5;
 * @return {boolean}
 */
proto.api.SegmentForView.prototype.getCurrent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setCurrent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool translation_flag = 6;
 * @return {boolean}
 */
proto.api.SegmentForView.prototype.getTranslationFlag = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setTranslationFlag = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_pretranslated = 7;
 * @return {boolean}
 */
proto.api.SegmentForView.prototype.getIsPretranslated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setIsPretranslated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool disabled = 8;
 * @return {boolean}
 */
proto.api.SegmentForView.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setDisabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string html_content_for_view = 9;
 * @return {string}
 */
proto.api.SegmentForView.prototype.getHtmlContentForView = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setHtmlContentForView = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string html_content = 10;
 * @return {string}
 */
proto.api.SegmentForView.prototype.getHtmlContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setHtmlContent = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string created_at = 11;
 * @return {string}
 */
proto.api.SegmentForView.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.SegmentForView} returns this
 */
proto.api.SegmentForView.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


goog.object.extend(exports, proto.api);
